<?xml version="1.0" encoding="UTF-8"?>
<project
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
>

	<modelVersion>4.0.0</modelVersion>

	<groupId>net.evoja.commons</groupId>
	<artifactId>commons</artifactId>
	<version>0.0.6-lic-deps</version>
	<packaging>pom</packaging>

	<modules>
		<module>checkerframework-run-pom</module>
		<module>checkerframework-stubs-nullness</module>
		<module>checkerframework-stubs-purity</module>
		<module>checkerframework-stubs-units</module>
		<module>checkerframework-units</module>
	</modules>

	<properties>
		<evj.commons.group>net.evoja.commons</evj.commons.group>

		<maven.compiler.source>17</maven.compiler.source>
		<maven.compiler.target>17</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

	</properties>

	<distributionManagement>
		<repository>
			<id>github</id>
			<name>GitHub Evoja Commons</name>
			<url>https://maven.pkg.github.com/evoja/java-commons</url>
		</repository>
	</distributionManagement>

	<repositories>
		<repository>
			<id>github</id>
			<name>GitHub Evoja Commons</name>
			<url>https://maven.pkg.github.com/evoja/java-commons</url>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>jitpack.io</id>
			<url>https://jitpack.io</url>
		</pluginRepository>
	</pluginRepositories>


	<dependencies>
		<!--
			Scopes:
				compile - build, test and run
				provided - build and test
				runtime - test and run
				test - compile and test

			Transitive:
			In the table, if a dependency is set to the scope in the left column,
			transitive dependencies at top row
			will result in a dependency with the scope listed at their intersection.

				*          compile  provided runtime  test
				compile    compile  –        runtime  –
				provided   provided –        provided –
				runtime    runtime  –        runtime  –
				test       test     –        test     –
		-->
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.junit.jupiter</groupId>
				<artifactId>junit-jupiter</artifactId>
				<version>5.8.2</version>
				<scope>test</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.2.0</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.9.0</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.0.0-M5</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-install-plugin</artifactId>
				<version>3.0.0-M1</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<version>3.0.0-M2</version>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<version>2.0.0</version>
			</plugin>
			<plugin>
				<groupId>com.github.carlomorelli</groupId>
				<artifactId>licensescan-maven-plugin</artifactId>
				<version>2.1</version>
			</plugin>
		</plugins>

		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>license-maven-plugin</artifactId>
					<executions>
						<execution>
							<phase>install</phase>
							<goals>
								<goal>third-party-report</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>com.github.carlomorelli</groupId>
					<artifactId>licensescan-maven-plugin</artifactId>
					<configuration>
						<printLicenses>true</printLicenses>
						<blacklistedLicenses>
<!--							<license>GNU General Public License, v2.0</license>-->
<!--							<license>GNU General Public License, v3.0</license>-->
							<license>regex:.*GNU.*</license>
						</blacklistedLicenses>
						<failBuildOnBlacklisted>true</failBuildOnBlacklisted>
					</configuration>
					<executions>
						<execution>
							<phase>compile</phase> <!-- choose the most relevant goal for your pipeline, e.g. 'compile', 'test' or 'deploy' -->
							<goals>
								<goal>audit</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>
